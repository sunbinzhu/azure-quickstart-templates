{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "clusterName": {
      "type": "string",
      "metadata": {
        "description": "The HPC Pack cluster name. It must be unique in the location because it is also used as the public DNS name prefix for the cluster. For example, the public DNS name is '&lt;clustername&gt;.westus.cloudapp.azure.com' if the resource group location is 'West US'. It must contain between 3 and 15 characters with lowercase letters and numbers, and must start with a letter."
      }
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "Location where the HPC Pack cluster will be created"
      }
    },
    "virtualNetworkName": {
      "type": "string",
      "metadata": {
        "description": "Name of the virtual network to be created. It must contain between 2 and 63 characters, start with a letter, end with a letter or number, and may contain only letters, numbers, underscores, periods, or hyphens."
      }
    },
    "privateDomainName": {
      "type": "string",
      "defaultValue": "hpc.local",
      "metadata": {
        "description": "The fully qualified domain name (FQDN) for the private domain forest which will be created by this template, for example 'hpc.local'."
      }
    },
    "storageAccountNamePrefix": {
      "type": "string",
      "metadata": {
        "description": "The name prefix of the new storage accounts created to store the VM disks: one storage account dedicated to the head node, and one storage account for every 20 compute nodes. For example, if 'mystorage' is specified, and there are 22 compute nodes, then the first storage account 'mystorage1' is for head node, the subsequent storage accounts 'mystorage2' and 'mystorage3' are for compute nodes."
      }
    },
    "storageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_RAGRS",
        "Premium_LRS"
      ],
      "metadata": {
        "description": "The type of the Storage Account created"
      }
    },
    "headNodeVMSize": {
      "type": "string",
      "defaultValue": "Standard_A4",
      "allowedValues": [
        "Standard_A3",
        "Standard_A4",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_A8",
        "Standard_A9",
        "Standard_A10",
        "Standard_A11",
        "Standard_D3",
        "Standard_D3_v2",
        "Standard_D4",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_D12",
        "Standard_D12_v2",
        "Standard_D13",
        "Standard_D13_v2",
        "Standard_D14",
        "Standard_D14_v2",
        "Standard_DS3",
        "Standard_DS4",
        "Standard_DS12",
        "Standard_DS13",
        "Standard_DS14",
        "Standard_G2",
        "Standard_G3",
        "Standard_G4",
        "Standard_G5",
        "Standard_GS2",
        "Standard_GS3",
        "Standard_GS4",
        "Standard_GS5"
      ],
      "metadata": {
        "description": "The VM role size of the head node"
      }
    },
    "computeNodeImage": {
      "type": "string",
      "defaultValue": "ComputeNode",
      "allowedValues": [
        "ComputeNode",
        "ComputeNodeWithExcel"
      ],
      "metadata": {
        "description": "The VM image of the compute nodes"
      }
    },
    "computeNodeNamePrefix": {
      "type": "string",
      "defaultValue": "IaaSCN-",
      "metadata": {
        "description": "The name prefix of the compute nodes. It must be no more than 12 characters, begin with a letter, and contain only letters, numbers and hyphens. For example, if 'IaaSCN-' is specified, the compute node names will be 'IaaSCN-000', 'IaaSCN-001', ..."
      }
    },
    "computeNodeNumber": {
      "type": "string",
      "defaultValue": "2",
      "metadata": {
        "description": "The number of the compute nodes"
      }
    },
    "computeNodeVMSize": {
      "type": "string",
      "defaultValue": "Standard_A3",
      "allowedValues": [
        "Standard_A1",
        "Standard_A2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_A8",
        "Standard_A9",
        "Standard_A10",
        "Standard_A11",
        "Standard_D1",
        "Standard_D1_v2",
        "Standard_D2",
        "Standard_D2_v2",
        "Standard_D3",
        "Standard_D3_v2",
        "Standard_D4",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_D11",
        "Standard_D11_v2",
        "Standard_D12",
        "Standard_D12_v2",
        "Standard_D13",
        "Standard_D13_v2",
        "Standard_D14",
        "Standard_D14_v2",
        "Standard_DS1",
        "Standard_DS2",
        "Standard_DS3",
        "Standard_DS4",
        "Standard_DS11",
        "Standard_DS12",
        "Standard_DS13",
        "Standard_DS14",
        "Standard_G1",
        "Standard_G2",
        "Standard_G3",
        "Standard_G4",
        "Standard_G5",
        "Standard_GS1",
        "Standard_GS2",
        "Standard_GS3",
        "Standard_GS4",
        "Standard_GS5"
      ],
      "metadata": {
        "description": "The VM role size of the compute nodes"
      }
    },
    "publicIPName": {
      "type": "string",
      "metadata": {
        "description": "The name of the public IP address"
      }
    },
    "publicIPRGName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Resource group in which the public IP address is created"
      }
    },
    "publicIPNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "Indicates whether the public IP address is new or existing"
      }
    },
    "publicIPDNSNameLabel": {
      "type": "string",
      "metadata": {
        "description": "The DNS name label of the public IP address"
      }
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Administrator user name for the virtual machines and the Active Directory domain."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Administrator password for the virtual machines and the Active Directory domain"
      }
    },
    "headNodePostConfigScript": {
      "type": "string",
      "defaultValue": " ",
      "metadata": {
        "description": "Optional URL of a public available PowerShell script you want to run on the head node after it is configured. You can also specify arguments for the script, for example 'http://www.consto.com/mypostscript.ps1 -Arg1 arg1 -Arg2 arg2'."
      }
    },
    "artifactsBaseUrl": {
      "type": "string",
      "defaultValue": "https://raw.githubusercontent.com/sunbinzhu/azure-quickstart-templates/DscWay/create-hpc-cluster",
      "metadata": {
        "description": "Base URL for Marketplace",
        "artifactsBaseUrl": ""
      }
    }
  },
  "variables": {
    "apiVersion": "2015-06-15",
    "location": "[parameters('location')]",
    "nbrCNPerStorageAccount": 20,
    "computeNodeNumber": "[int(parameters('computeNodeNumber'))]",
    "cnStorageAccountNumber": "[add(div(sub(variables('computeNodeNumber'), 1), variables('nbrCNPerStorageAccount')), 1)]",
    "cnStorageAccountIndexOffset": 2,
    "storageAccountIndexWidth": "[length(string(sub(add(variables('cnStorageAccountNumber'), variables('cnStorageAccountIndexOffset')), 1)))]",
    "hnStorageAccountName": "[concat(parameters('storageAccountNamePrefix'), padLeft('1', variables('storageAccountIndexWidth'), '0'))]",
    "hnStorageAccountId": "[resourceId('Microsoft.Storage/storageAccounts',variables('hnStorageAccountName'))]",
    "addressPrefix": "10.0.0.0/16",
    "subnet1Name": "Subnet-1",
    "subnet1Prefix": "10.0.0.0/22",
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',parameters('virtualNetworkName'))]",
    "subnetRef": "[concat(variables('vnetID'),'/subnets/',variables('subnet1Name'))]",
    "publicIPAddressType": "Dynamic",
    "availabilitySetNamePrefix": "[concat(parameters('clusterName'), '-AVSet')]",
    "nbrVMPerAvailabilitySet": 50,
    "availabilitySetNumber": "[add(div(variables('computeNodeNumber'), variables('nbrVMPerAvailabilitySet')), 1)]",
    "dnsName": "[concat(parameters('clusterName'), 'ep')]",
    "nicName": "[concat(parameters('clusterName'),'-nic')]",
    "nicNameHN": "[concat(variables('nicName'),'-hn')]",
    "vmSizeSuffix": "[uniqueString(resourceGroup().id)]",
    "suffixA8Size": "[concat('Standard_A8', variables('vmSizeSuffix'))]",
    "suffixA9Size": "[concat('Standard_A9', variables('vmSizeSuffix'))]",
    "suffixHNSize": "[concat(parameters('headNodeVMSize'), variables('vmSizeSuffix'))]",
    "suffixCNSize": "[concat(parameters('computeNodeVMSize'), variables('vmSizeSuffix'))]",
    "cnRDMACapable": "[replace(replace(replace(variables('suffixCNSize'), variables('suffixA8Size'),'enabled'), variables('suffixA9Size'),'enabled'),variables('suffixCNSize'), 'disabled')]",
    "hnRDMACapable": "[replace(replace(replace(variables('suffixHNSize'), variables('suffixA8Size'),'enabled'), variables('suffixA9Size'),'enabled'),variables('suffixHNSize'), 'disabled')]",
    "hnRDMAJumpBox": {
      "disabled-disabled": "disabled",
      "disabled-enabled": "disabled",
      "enabled-disabled": "disabled",
      "enabled-enabled": "enabled"
    },
    "hnRDMAState": "[variables('hnRDMAJumpBox')[concat(variables('hnRDMACapable'), '-', variables('cnRDMACapable'))]]",
    "cnRDMAState": "[variables('cnRDMACapable')]",
    "availableCNImageSkus": {
      "ComputeNode": "2012R2CN",
      "ComputeNodeWithExcel": "2012R2CNExcel"
    },
    "computeNodeImagePublisher": "MicrosoftWindowsServerHPCPack",
    "computeNodeImageOffer": "WindowsServerHPCPack",
    "computeNodeImageSku": "[variables('availableCNImageSkus')[parameters('computeNodeImage')]]",
    "adminBase64Password": "[base64(parameters('adminPassword'))]",
    "customScriptLocation": "[concat(parameters('artifactsBaseUrl'), '/')]",
    "iaasInfoArg": "[concat('-SubscriptionId ', subscription().subscriptionId, ' -VNet ', parameters('virtualNetworkName'), ' -Subnet ', variables('subnet1Name'), ' -Location \"', variables('location'), '\"')]",
    "headNodeCommandStr": "[concat('powershell.exe -ExecutionPolicy Unrestricted -File PrepareHN.ps1 -DomainFQDN ', parameters('privateDomainName'), ' -AdminUserName ', parameters('adminUsername'), ' -AdminBase64Password \"', variables('adminBase64Password'), '\" -CNSize ', parameters('computeNodeVMSize'), ' -PostConfigScript \"', parameters('headNodePostConfigScript'), '\" ', variables('iaasInfoArg'))]",
    "hnStorageConnStrPrefix": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('hnStorageAccountName'), ';AccountKey=')]"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('hnStorageAccountName')]",
      "apiVersion": "[variables('apiVersion')]",
      "location": "[variables('location')]",
      "properties": {
        "accountType": "[parameters('storageAccountType')]"
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[parameters('virtualNetworkName')]",
      "location": "[variables('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnet1Name')]",
            "properties": {
              "addressPrefix": "[variables('subnet1Prefix')]"
            }
          }
        ]
      }
    },
    {
      "name": "setupClusterPublicIP",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('customScriptLocation'), 'publicip-', parameters('publicIPNewOrExisting'), '.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "apiVersion": {
            "value": "[variables('apiVersion')]"
          },
          "location": {
            "value": "[variables('location')]"
          },
          "publicIPAddressName": {
            "value": "[parameters('publicIPName')]"
          },
          "publicIPAddressType": {
            "value": "[variables('publicIPAddressType')]"
          },
          "domainNameLabel": {
            "value": "[parameters('publicIPDNSNameLabel')]"
          },
          "publicIPRGName": {
            "value": "[parameters('publicIpRGName')]"
          }
        }
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('nicNameHN')]",
      "location": "[variables('location')]",
      "dependsOn": [
        "Microsoft.Resources/deployments/setupClusterPublicIP"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "IPConfig",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "10.0.0.4",
              "publicIPAddress": {
                "id": "[reference('setupClusterPublicIP').outputs.resourceId.value]"
              },
              "subnet": {
                "id": "[variables('subnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-01-01",
      "type": "Microsoft.Resources/deployments",
      "name": "createAvailabilitySets",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('customScriptLocation'), 'availabilitySets.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "apiVersion": {
            "value": "[variables('apiVersion')]"
          },
          "location": {
            "value": "[variables('location')]"
          },
          "availabilitySetNamePrefix": {
            "value": "[variables('availabilitySetNamePrefix')]"
          },
          "availabilitySetNumber": {
            "value": "[variables('availabilitySetNumber')]"
          }
        }
      }
    },
    {
      "apiVersion": "2015-01-01",
      "type": "Microsoft.Resources/deployments",
      "name": "createHeadNode",
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('nicNameHN'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('hnStorageAccountName'))]",
        "Microsoft.Resources/deployments/createAvailabilitySets"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('customScriptLocation'), 'headnode-rdma-', variables('hnRDMAState'), '.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "apiVersion": {
            "value": "[variables('apiVersion')]"
          },
          "location": {
            "value": "[variables('location')]"
          },
          "vmName": {
            "value": "[parameters('clusterName')]"
          },
          "vmSize": {
            "value": "[parameters('headNodeVMSize')]"
          },
          "storageAccountName": {
            "value": "[variables('hnStorageAccountName')]"
          },
          "nicName": {
            "value": "[variables('nicNameHN')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "availabilitySetName": {
            "value": "[concat(variables('availabilitySetNamePrefix'), '000')]"
          },
          "scriptBaseUri": {
            "value": "[variables('customScriptLocation')]"
          },
          "privateDomainName": {
            "value": "[parameters('privateDomainName')]"
          }
        }
      }
    },
    {
      "apiVersion": "2015-01-01",
      "type": "Microsoft.Resources/deployments",
      "name": "updateVNetDNS",
      "dependsOn": [
        "Microsoft.Resources/deployments/createHeadNode"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('customScriptLocation'),'vnet-with-dns-server.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "apiVersion": {
            "value": "[variables('apiVersion')]"
          },
          "location": {
            "value": "[variables('location')]"
          },
          "virtualNetworkName": {
            "value": "[parameters('virtualNetworkName')]"
          },
          "virtualNetworkAddressRange": {
            "value": "[variables('addressPrefix')]"
          },
          "subnetName": {
            "value": "[variables('subnet1Name')]"
          },
          "subnetRange": {
            "value": "[variables('subnet1Prefix')]"
          },
          "DNSServerAddress": {
            "value": [
              "10.0.0.4",
              "8.8.8.8"
            ]
          }
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(parameters('clusterName'),'/configureHeadNode')]",
      "apiVersion": "[variables('apiVersion')]",
      "location": "[variables('location')]",
      "dependsOn": [
        "Microsoft.Resources/deployments/updateVNetDNS"
      ],
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "CustomScriptExtension",
        "typeHandlerVersion": "1.4",
        "settings": {
          "fileUris": [
            "[concat(variables('customScriptLocation'), 'PrepareHN.ps1')]",
            "[concat(variables('customScriptLocation'), 'HPCHNPrepare.ps1')]",
            "[concat(variables('customScriptLocation'), 'HpcPrepareUtil.ps1')]"
          ],
          "commandToExecute": "[concat(variables('headNodeCommandStr'), ' -AzureStorageConnStr \"', variables('hnStorageConnStrPrefix'), listKeys(variables('hnStorageAccountId'),variables('apiVersion')).key1, '\" -PublicDnsName ', reference('setupClusterPublicIP').outputs.fqdn.value)]"
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[concat(parameters('storageAccountNamePrefix'), padLeft(string(copyIndex(variables('cnStorageAccountIndexOffset'))), variables('storageAccountIndexWidth'), '0'))]",
      "apiVersion": "[variables('apiVersion')]",
      "location": "[variables('location')]",
      "dependsOn": [
        "Microsoft.Resources/deployments/createHeadNode"
      ],
      "copy": {
        "name": "hpcStorageAccounts",
        "count": "[variables('cnStorageAccountNumber')]"
      },
      "properties": {
        "accountType": "[parameters('storageAccountType')]"
      }
    },
    {
      "apiVersion": "2015-01-01",
      "type": "Microsoft.Resources/deployments",
      "name": "[concat('create', parameters('computeNodeNamePrefix'), padLeft(string(copyIndex()), 3, '0'))]",
      "dependsOn": [
        "Microsoft.Resources/deployments/createAvailabilitySets",
        "Microsoft.Resources/deployments/updateVNetDNS",
        "[concat('Microsoft.Storage/storageAccounts/', parameters('storageAccountNamePrefix'), padLeft(string(add(div(copyIndex(), variables('nbrCNPerStorageAccount')), variables('cnStorageAccountIndexOffset'))), variables('storageAccountIndexWidth'), '0'))]"
      ],
      "copy": {
        "name": "CN",
        "count": "[variables('computeNodeNumber')]"
      },
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('customScriptLocation'), 'windowsnode-rdma-', variables('cnRDMAState'), '.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "apiVersion": {
            "value": "[variables('apiVersion')]"
          },
          "location": {
            "value": "[variables('location')]"
          },
          "nicName": {
            "value": "[concat(variables('nicName'), padLeft(string(copyIndex()), 3, '0'))]"
          },
          "subnetId": {
            "value": "[variables('subnetRef')]"
          },
          "vmName": {
            "value": "[concat(parameters('computeNodeNamePrefix'), padLeft(string(copyIndex()), 3, '0'))]"
          },
          "vmSize": {
            "value": "[parameters('computeNodeVMSize')]"
          },
          "storageAccountName": {
            "value": "[concat(parameters('storageAccountNamePrefix'), padLeft(string(add(div(copyIndex(), variables('nbrCNPerStorageAccount')), variables('cnStorageAccountIndexOffset'))), variables('storageAccountIndexWidth'), '0'))]"
          },
          "imgPublisher": {
            "value": "[variables('computeNodeImagePublisher')]"
          },
          "imgOffer": {
            "value": "[variables('computeNodeImageOffer')]"
          },
          "imgSku": {
            "value": "[variables('computeNodeImageSku')]"
          },
          "imgVersion": {
            "value": "latest"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "availabilitySetName": {
            "value": "[concat(variables('availabilitySetNamePrefix'), padLeft(string(div(add(copyIndex(), 1), variables('nbrVMPerAvailabilitySet'))), 3, '0'))]"
          },
          "customData": {
            "value": "[base64(concat('HPCClusterName=', parameters('clusterName'), '\r\nImageCategory=public\r\nImageName=WindowsServerHPCPack-', variables('computeNodeImageSku'), '\r\nVMSize=', parameters('computeNodeVMSize')))]"
          },
          "scriptBaseUri": {
            "value": "[variables('customScriptLocation')]"
          },
          "privateDomainName": {
            "value": "[parameters('privateDomainName')]"
          }
        }
      }
    }
  ],
  "outputs": {
    "clusterDNSName": {
      "type": "string",
      "value": "[reference('setupClusterPublicIP').outputs.fqdn.value]"
    }
  }
}
